<?php
    use Application\Entity\Db\Role;
    use Application\Entity\Db\Privilege;
    use UnicaenAuth\Provider\Privilege\Privileges;
    use Application\Entity\Db\Etablissement;
    $canVisualiser = $this->isAllowed(Privileges::getResourceId(Privileges::DROIT_PRIVILEGE_VISUALISATION));
    $canModifier = $this->isAllowed(Privileges::getResourceId(Privileges::DROIT_PRIVILEGE_EDITION));


/**
 * //Provenant du controleur
 * @var Role[] $roles
 * @var Privilege[] $privileges
 * @var Etablissement[] $etablissements
 *
 * //Utilisée couramment
 * @var Role $role
 * @var Privilege $privilege
 */
?>

<?php $this->headTitle($this->translate("Rôles/Privilèges")) ?>
<h1 class="page-header first">
    <?php echo $this->translate("Rôles/Privilèges") ?>
</h1>

<div class="pull-left">
    <?php echo $this->partial('partial/form-filtrage') ?>
</div>

<?php

echo "<table id='mytable' class='mytable table-bordered'>";
echo generateTableHeader($roles);
echo generateTableBody($roles,$privileges);
echo "</table>";

?>

<script>
    $(document).ready(function() {
        $("td").click(function() {

            var canModifier =  Boolean(<?php echo $canModifier; ?>);
            if (!canModifier) {
                alert("Vous n'êtes pas autorisé à modifier les privilèges associés à un rôle.");
                return;
            }

            var id = $(this).attr("id");
            var splits = id.split("_");
            var role = splits[1];
            var privilege = splits[0];
            var url = "modifier-privilege/" + role + "/" + privilege;

            $.ajax({
                url : url,
                beforeSend:
                    function () {
                        document.getElementById(id).innerHTML = "<img style='height:40px;' src='css/loading.gif'/>";
                    },
                success:
                    function(retour){
                        var texte = "";
                        if (retour == 1) texte = "<span class='glyphicon glyphicon-ok text-success'></span>";
                        else var texte = "<span class='glyphicon glyphicon-remove text-danger'></span>";
                        document.getElementById(id).innerHTML = texte;
                    }
            });


        });
    });
</script>


<?php
    /**
     * Cette fonction génère le header du tableau des Rôles/Privilèges
     * @param Role[] $roles
     * @return string
     */
    function generateTableHeader($roles)
    {
        $texte  = '';
        $texte .= '<thead>';
        $texte .= '<tr>';
        $texte .= '<th></th>'; //empty first cell
        foreach ($roles as $role) {
            $texte .=  generateTableHeaderRole($role);
        }
        $texte .= '</tr>';
        $texte .= '</thead>';
        return $texte;
    }

    /**
     * Cette fonction est en charge de créer le header associé à un role avec sur :
     * - la première ligne : le libelle du rôle (Adminstrateur, Doctorant, ...)
     * - la seconde ligne : le sigle de la structure de rattachement (Unicaen, EA4285 CERMN, ...)
     * Attention elle aussi en charge de donner les bonnes classes CSS
     * @param Role $role
     * @return string
     */
    function generateTableHeaderRole($role) {

        $libelleRole = $role->getLibelle();
        //Les rôles "Adminstrateur technique" et "Observateur" non pas de structure associée !!!
        $sigleStructure = "";
        $depend = "";
        if ($role->isTheseDependant() || $role->isStructureDependant()) {
//            var_dump($role->getId(). " -> " .$role->getCode(). " --- ". $role->getRoleId());
            $sigleStructure = "";
            if ($role->getStructure() === null) {
                $sigleStructure = "structure manquante";
            }  elseif ($role->getStructure()->getSigle() === null || $role->getStructure()->getSigle() === "") {
                $sigleStructure = "sigle manquant";
            } else {
                $sigleStructure = $role->getStructure()->getSigle();
            }

            if ($role->isTheseDependant()) {
                $depend = "these";
            } else {
                if ($role->getStructure() === null) {
                    $sigleStructure = "structure manquante";
                } else {
                    $depend = $role->getStructure()->getTypeStructure()->getCode();
                }
            }
        }
        $texte  = '<th class="role">';
        $texte .= $libelleRole;
        $texte .= '<br/>';
        $texte .= '<span class="depend '.$depend.'">' .$sigleStructure . '</span>';
        $texte .= '</th>';
        return $texte;
    }

    /**
     * Cette fonction génère le body du tableau des Rôles/Privilèges
     * @param Role[] $roles
     * @param Privilege[] $privileges
     * @return string
     */
    function generateTableBody($roles, $privileges)
    {
        $texte  = '';
        $texte .= '<tbody>';
        $previous_categorie = null;
        foreach($privileges as $privilege) {
            if ($previous_categorie !== $privilege->getCategorie()) {
                $texte .= generateTableCategorieLine($privilege, $roles);
                $previous_categorie = $privilege->getCategorie();
            }
            $texte .= generateTablePrivilegeLine($privilege, $roles);
        }
        $texte .=  '</tbody>';
        return $texte;
    }

    /**
     * Cette fonction génére la ligne traversant le tableau la de l'affichage d'un catégorie
     * @param Privilege $privilege
     * @param Role[] $roles
     * @return string
     */
    function generateTableCategorieLine($privilege, $roles)
    {
        $texte  = '';
        $texte .= '<tr>';
        $texte .= '<th colspan="'. (count($roles)+1) . '" class="categorie">';
        $texte .= $privilege->getCategorie()->getLibelle();
        $texte .= '</th>';
        $texte .= '</tr>';
        return $texte;
    }


    /**
     * * Cette fonction génére la ligne associée à un privilège
     * @param Privilege $privilege
     * @param Role[] $roles
     * @return string
     */
    function generateTablePrivilegeLine($privilege, $roles)
    {
        $texte  = '';
        $texte .= '<tr>';
        $texte .= '<th class="privilege">'.$privilege->getLibelle().'</th>';

        foreach($roles as $role) {
            $code = ($role->getStructure() !== null) ? $role->getStructure()->getSigle() : '';
            $title = $role->getLibelle(). ' - '.$code. " \n " .$privilege->getLibelle();

            $id = $privilege->getId().'_'.$role->getId();
            $texte .= '<td class="droit" id="'.$id.'" title="'.$title.'">';

            if( array_search($role, $privilege->getRole()->toArray()) !== false) {
                $texte .= '<span class="glyphicon glyphicon-ok text-success"></span>';
            } else {
                $texte .= '<span class="glyphicon glyphicon-remove text-danger"></span>';
            }

            $texte .= '</td>';
        }
        $texte.= '</tr>';
        return $texte;
    }
?>


<style>

    table.mytable {
        background-color: white;
    }

    th.categorie {
        font-style: italic;
        font-size: 12pt;
        margin-left: 15px;
        background-color: lightgoldenrodyellow;
    }

    th.privilege {
        height:50px;
    }

    th.role {
        min-width:50px;
        writing-mode: vertical-lr;
        text-align: left;
        vertical-align: top;
    }
    .depend
    {
        //text-orientation: upright;
    }

    .ecole-doctorale
    {
        color: #5B2268;
    }

    .unite-recherche
    {
        color: #0a3783;
    }

    .etablissement
    {
        color: #870a0a;
    }

    .these
    {
        color: #004602;
    }

    td.droit {
        vertical-align: center;
        text-align: center;
    }

    td.droit :hover {
        cursor:pointer;
    }
</style>