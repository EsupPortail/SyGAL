<?php

use Application\Entity\Db\These;
use Application\Entity\Db\Acteur;
use Application\Entity\Db\Doctorant;
use Application\Entity\Db\Individu;
use Application\View\Renderer\PhpRenderer;
use Application\Service\Notification\NotificationService;

/**
 * @var PhpRenderer $this
 * @var These       $these
 */

/**
 * Cette fonction retourne et formate la denomination d'un acteur
 * @param  Acteur       $acteur
 * @param  bool         $civilite permet d'afficher la civilité de l'acteur
 * @return string       la denomination de l'acteur
 */
function getActeurDenomination(Acteur $acteur, $civilite = false) {
   return getIndividuDenomination($acteur->getIndividu(), $civilite);
}
/**
 * Cette fonction retourne et formate la denomination d'un doctorant
 * @param  Doctorant    $doctorant
 * @param  bool         $civilite permet d'afficher la civilité du doctorant
 * @return string       la denomination du doctorant
 */
function getDoctorantDenomination(Doctorant $doctorant, $civilite = false) {
    return getIndividuDenomination($doctorant->getIndividu(), $civilite);
}
/**
 * Cette fonction retourne et formate la denomination d'un individu
 * @param Individu      $individu
 * @param bool          $civilite
 * @return string       la denomination de l'individu
 *
 * RMQ: en cas où le nom usuel et le nom patronymique sont différent alors les deux sont affichés liés d'un trait d'union
 * RMQ: elle est appellé par les autres fonctions getXXXDenomination
 */
function getIndividuDenomination(Individu $individu, $civilite = false) {
    $texte = "";
    if ($civilite) $texte .= $individu->getCivilite(). " ";
    $texte .= ucwords(strtolower($individu->getPrenom1(). " "), " -");
    $texte .= $individu->getNomUsuel();
    if ($individu->getNomUsuel() != $individu->getNomPatronymique()) {
        $texte .= "-".$individu->getNomPatronymique();
    }
    return $texte;
}

/**
 * Cette fonction retourne le rôle d'un acteur au sein d'une thèse avec la notation "correcte"
 * @param Acteur        $acteur
 * @param bbol          $inclusive permet l'utilisation de l'écriture inclusive
 * @return string       le rôle "corrigé"
 *
 * TODO gérer les co-directeurs / co-directrices
 */
function getActeurRole(Acteur $acteur, $inclusive) {
    $roleCode   = $acteur->getRole()->getSourceCode();
    $abrev      = explode("::", $roleCode)[1];
    $femme      = $acteur->getIndividu()->estUneFemme();

    $role = "Inconnu";
    switch ($abrev) {
        case ($abrev == "R" && !$inclusive) :
            $role = "Rapporteur";
            break;
        case ($abrev == "R" && $inclusive && $femme):
            $role = "Rapportrice";
            break;
        case ($abrev == "D" && !$inclusive) :
            $role = "Directeur";
            break;
        case ($abrev == "D" && $inclusive && $femme):
            $role = "Directrice";
            break;
        case ($abrev == "M" && !$inclusive) :
            $role = "Examinateur";
            break;
        case ($abrev == "M" && $inclusive && $femme):
            $role = "Examinatrice";
            break;
    }
    return $role;

}

/**
 * Cette fonction retourne le code HTML associé au logo de la COMUE
 * @return string
 */
function generateLogoComue() {
    $img_src = APPLICATION_DIR . "/ressources/Logos/Etab/COMUE.png";
    $texte  = "<div class='logo-comue'>";
    $texte .= "<img src='".$img_src."'/>";
    $texte .= "</div>";

    return $texte;
}

/**
 * Cette fonction retourne le code HTML du bloc de description du diplôme
 * @param These         $these
 * @return string
 */
function generateDiplomeInfos(These $these) {
    $specialite = ucwords(mb_strtolower($these->getLibelleDiscipline()));
    $etablissement = $these->getEtablissement()->getLibelle();

    $texte  = "<div class='bandeau-these'>THÈSE</div>";
    $texte .= "<div class='infos-diplome'>";
    $texte .= "<span class='larger-infos'>Pour obtenir le diplôme de doctorat" ."</span><br/>";
    $texte .= "Spécialité ". $specialite ."<br/>";
    $texte .= "Préparé au sein de l'". $etablissement ."<br/>";
    $texte .= "</div>";
    return $texte;
}

/**
 * Cette fonction retourne le code HTML du bloc de titre
 * @param These         $these
 * @return string
 */
function generateTitre(These $these) {
    $titre = $these->getTitre();

    $texte  = "<div class='bandeau-titre'>".$titre."</div>";
    return $texte;
}

/**
 * Cette fonction retourne le code HTML du bloc de description du diplôme
 * @param These         $these
 * @return string
 */
function generateDoctorantInfos(These $these) {
    $texte  = "<div class='infos-doctorant' style=''>";
    $texte .= "Présentée et soutenue par" . "<br/>";
    $texte .= getDoctorantDenomination($these->getDoctorant(), false) . "<br/>";
    $texte .= "</div>";

    return $texte;
}

/**
 * Prédicat testant si un acteur est un directeur de thèse
 * @param Acteur $var
 * @return bool
 */
function estDirecteur(Acteur $var) {
    $role = $var->getRole()->getSourceCode();
    return  (explode("::", $role)[1] == "D");
}
/**
 * Prédicat testant si un acteur est un rapporteur de thèse
 * @param Acteur $var
 * @return bool
 */
function estRapporteur(Acteur $var) {
    $role = $var->getRole()->getSourceCode();
    return  (explode("::", $role)[1] == "R");
}
/**
 * Cette fonction retourne le code HTML du bloc de description du diplôme
 * @param These         $these
 * @param bool          $inclusive gère l'utilisation de l'écriture inclusive pour les rôles
 * @return string
 */
function generateJuryInfos(These $these, $inclusive=false) {

    $date = $these->getDateSoutenance()->format("d/m/Y");
    $publiquement = "publiquement";
    $jury = $these->getActeurs()->toArray();

    $texte  = "<table class='jury'>";
    $texte .= "<tr><th colspan='3'>";
    $texte .= "Thèse soutenue ".$publiquement." le ".$date." <br/>";
    $texte .= "devant le jury composé de";
    $texte .= "</th></tr>";

    $rapporteurs = array_filter($jury, "estRapporteur");
    $directeurs = array_filter($jury, "estDirecteur");
    $membres =  array_diff(array_diff($jury, $rapporteurs), $directeurs);
    $roles = [$rapporteurs, $membres, $directeurs];

    /** @var \Application\Entity\Db\Acteur $acteur */
    foreach ($roles as $subroles) {
        foreach ($subroles as $acteur) {

            $nom  = getActeurDenomination($acteur, true);

            $qualite = $acteur->getQualite();
            $etablissement = $acteur->getEtablissement();

            $role = getActeurRole($acteur, $inclusive);

            $texte .= "<tr>";
            $texte .= "<td>".$nom."</td>";
            $texte .= "<td>".$qualite.", ".$etablissement."</td>";
            $texte .= "<td>".$role."</td>";
            $texte .= "</tr>";
        }}
    $texte .= "</table>";
    return $texte;
}

/** Fonction générant le code HTML lié au encradrant
 * @param These         $these
 * @return string
 */
function generateEncadrementInfos(These $these) {
    $ur = $these->getUniteRecherche()->getLibelle();
    $directeurs = array_filter($these->getActeurs()->toArray(), "estDirecteur");
    $texte  = "<div class='infos-encadrement'>";
    $texte .= "Thèse dirigée par ";
    /** @var \Application\Entity\Db\Acteur $directeur */
    $directeurs_array = [];
    foreach ($directeurs as $directeur) {
        $directeurs_array[] = getActeurDenomination($directeur);
    }
    $texte .= implode(" et ", $directeurs_array);
    $texte .= ", ";
    $texte .= $ur;
    $texte .= "</div>";
    return $texte;
}

/** Fonction générant le code HTML lié au encradrant
 * @param These         $these
 * @param NotificationService $notifier
 * @return string
 */
function generateLogos(These $these, NotificationService $notifier) {

    if ($these->getEtablissement()->getCheminLogo() === null)
        $notifier->notifierLogoAbsentEtablissement($these->getEtablissement());
    if ($these->getEcoleDoctorale()->getCheminLogo() === null)
        $notifier->notifierLogoAbsentEcoleDoctorale($these->getEcoleDoctorale());
    if ($these->getUniteRecherche()->getCheminLogo() === null)
        $notifier->notifierLogoAbsentUniteRecherche($these->getUniteRecherche());
    $logouni = APPLICATION_DIR. $these->getEtablissement()->getCheminLogo();
    $logoed  = APPLICATION_DIR. $these->getEcoleDoctorale()->getCheminLogo();
    $logour  = APPLICATION_DIR. $these->getUniteRecherche()->getCheminLogo();

    $texte = "";
    $texte  .= "<div class='logos'>";
    $texte .= "<table style='border:none;' class='logos'>";
    $texte .= "<tr><td>";
    $texte .= "<img class='logo_small' src='".$logouni."'/>";
    $texte .= "</td><td>";
    $texte .= "<img class='logo_small' src='".$logoed."'/>";
    $texte .= "</td><td>";
    $texte .= "<img class='logo_small' src='".$logour."'/>";
    $texte .= "</td></tr></table>";
    $texte .= "</div>";

    return $texte;
}

?>



<div style="text-align: center; margin-bottom: 30px;">
    <?php echo generateLogoComue(); ?>
</div>
<?php echo generateDiplomeInfos($these); ?>
<?php echo generateTitre($these); ?>
<?php echo generateDoctorantInfos($these); ?>
<br/>
<?php echo generateJuryInfos($these) ?>
<br/>
<?php echo generateEncadrementInfos($these); ?>
<?php echo generateLogos($these, $notifier); ?>

