create or replace view SRC_INDIVIDU as
SELECT
  NULL                                     AS id,
  tmp.SOURCE_CODE,
  src.id                                   AS SOURCE_ID,
  TYPE,
  SUPANN_ID,
  civ                                      AS CIVILITE,
  lib_nom_usu_ind                          AS NOM_USUEL,
  lib_nom_pat_ind                          AS NOM_PATRONYMIQUE,
  lib_pr1_ind                              AS PRENOM1,
  lib_pr2_ind                              AS PRENOM2,
  lib_pr3_ind                              AS PRENOM3,
  EMAIL,
  dat_nai_per                              AS DATE_NAISSANCE,
  lib_nat                                  AS NATIONALITE
FROM TMP_INDIVIDU tmp
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
/

create or replace view SRC_DOCTORANT as
SELECT
  NULL                                     AS id,
  tmp.SOURCE_CODE,
  src.id                                   AS source_id,
  i.id                                     AS individu_id,
  e.id                                     AS etablissement_id
FROM TMP_DOCTORANT tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = 'COMUE::'||tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
       JOIN INDIVIDU i ON i.SOURCE_CODE = tmp.INDIVIDU_ID
/

create or replace view SRC_THESE as
select
  null                            as id,
  tmp.source_code                 as source_code,
  src.id                          as source_id,
  e.id                            as etablissement_id,
  d.id                            as doctorant_id,
  coalesce(ed_substit.id, ed.id)  as ecole_doct_id,
  coalesce(ur_substit.id, ur.id)  as unite_rech_id,
  ed.id                           as ecole_doct_id_orig,
  ur.id                           as unite_rech_id_orig,
  tmp.lib_ths                     as titre,
  tmp.eta_ths                     as etat_these,
  to_number(tmp.cod_neg_tre)      as resultat,
  tmp.lib_int1_dis                as lib_disc,
  tmp.dat_deb_ths                 as date_prem_insc,
  tmp.annee_univ_1ere_insc        as annee_univ_1ere_insc,
  tmp.dat_prev_sou                as date_prev_soutenance,
  tmp.dat_sou_ths                 as date_soutenance,
  tmp.dat_fin_cfd_ths             as date_fin_confid,
  tmp.lib_etab_cotut              as lib_etab_cotut,
  tmp.lib_pays_cotut              as lib_pays_cotut,
  tmp.correction_possible         as correc_autorisee,
  tem_sou_aut_ths                 as soutenance_autoris,
  dat_aut_sou_ths                 as date_autoris_soutenance,
  tem_avenant_cotut               as tem_avenant_cotut
from tmp_these tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = 'COMUE::'||tmp.ETABLISSEMENT_ID
       join etablissement e on e.structure_id = s.id
       join source src on src.code = tmp.source_id
       join doctorant d on d.source_code = tmp.doctorant_id

       left join ecole_doct ed on ed.source_code = tmp.ecole_doct_id
       left join unite_rech ur on ur.source_code = tmp.unite_rech_id

       left join structure_substit ss_ed on ss_ed.from_structure_id = ed.structure_id
       left join ecole_doct ed_substit on ed_substit.structure_id = ss_ed.to_structure_id

       left join structure_substit ss_ur on ss_ur.from_structure_id = ur.structure_id
       left join unite_rech ur_substit on ur_substit.structure_id = ss_ur.to_structure_id
/

create or replace view SRC_ROLE as
SELECT
  NULL                       AS id,
  tmp.SOURCE_CODE            AS SOURCE_CODE,
  src.ID                     AS source_id,
  --e.id                       AS etablissement_id,
  tmp.LIB_ROJ                AS libelle,
  to_char(tmp.id)            AS code,
  tmp.LIB_ROJ||' '||s.CODE   AS role_id,
  1                          AS these_dep,
  s.ID                       AS STRUCTURE_ID,
  NULL                       AS TYPE_STRUCTURE_DEPENDANT_ID
FROM TMP_ROLE tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = 'COMUE::'||tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN STRUCTURE s ON s.id = e.STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
/

create or replace view SRC_ACTEUR as
SELECT
  NULL                                     AS id,
  tmp.SOURCE_CODE,
  src.ID                                   AS SOURCE_ID,
  i.id                                     AS INDIVIDU_ID,
  t.id                                     AS THESE_ID,
  r.id                                     AS ROLE_ID,
  coalesce(etab_substit.id, eact.id)       AS ACTEUR_ETABLISSEMENT_ID,
  tmp.LIB_CPS                              AS QUALITE,
  tmp.LIB_ROJ_COMPL                        AS LIB_ROLE_COMPL
FROM TMP_ACTEUR tmp
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
       JOIN INDIVIDU i ON i.SOURCE_CODE = tmp.INDIVIDU_ID
       JOIN THESE t ON t.SOURCE_CODE = tmp.THESE_ID
       JOIN ROLE r ON r.SOURCE_CODE = tmp.ROLE_ID
       LEFT JOIN ETABLISSEMENT eact ON eact.SOURCE_CODE = tmp.ACTEUR_ETABLISSEMENT_ID
       LEFT JOIN STRUCTURE_SUBSTIT ss_ed on ss_ed.FROM_STRUCTURE_ID = eact.STRUCTURE_ID
       LEFT JOIN ETABLISSEMENT etab_substit on etab_substit.STRUCTURE_ID = ss_ed.TO_STRUCTURE_ID
/

create or replace view SRC_VARIABLE as
SELECT
  NULL                   AS id,
  tmp.SOURCE_CODE,
  src.ID                 AS SOURCE_ID,
  e.id                   AS ETABLISSEMENT_ID,
  tmp.COD_VAP            AS CODE,
  tmp.lib_vap            AS DESCRIPTION,
  tmp.par_vap            AS VALEUR,
  tmp.DATE_DEB_VALIDITE,
  tmp.DATE_FIN_VALIDITE
FROM TMP_VARIABLE tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = 'COMUE::'||tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
/

create or replace view SRC_STRUCTURE as
SELECT
  NULL              AS id,
  tmp.SOURCE_CODE   as SOURCE_CODE,
  tmp.id            as CODE,
  src.id            AS SOURCE_ID,
  ts.id             as TYPE_STRUCTURE_ID,
  tmp.SIGLE,
  tmp.LIBELLE,
  tmp.CODE_PAYS,
  tmp.LIBELLE_PAYS
FROM TMP_STRUCTURE tmp
       JOIN TYPE_STRUCTURE ts on ts.CODE = tmp.TYPE_STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
/

create or replace view SRC_ECOLE_DOCT as
SELECT
  NULL              AS id,
  tmp.SOURCE_CODE   as SOURCE_CODE,
  src.id            AS SOURCE_ID,
  s.ID              as STRUCTURE_ID
FROM TMP_ECOLE_DOCT tmp
       JOIN STRUCTURE s on s.SOURCE_CODE = tmp.STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
/

create or replace view SRC_UNITE_RECH as
SELECT
  NULL              AS id,
  tmp.SOURCE_CODE   as SOURCE_CODE,
  src.id            AS SOURCE_ID,
  s.ID              as STRUCTURE_ID
FROM TMP_UNITE_RECH tmp
       JOIN STRUCTURE s on s.SOURCE_CODE = tmp.STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
/

create or replace view SRC_ETABLISSEMENT as
SELECT
  NULL              AS id,
  tmp.SOURCE_CODE   as SOURCE_CODE,
  src.id            AS SOURCE_ID,
  s.ID              as STRUCTURE_ID
FROM TMP_ETABLISSEMENT tmp
       JOIN STRUCTURE s on s.SOURCE_CODE = tmp.STRUCTURE_ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
/

create or replace view SRC_FINANCEMENT as
SELECT
  NULL                  AS id,
  tmp.SOURCE_CODE       AS SOURCE_CODE,
  src.ID                AS source_id,
  --e.id                  AS etablissement_id,
  t.id                  AS THESE_ID,
  to_number(tmp.ANNEE)  AS ANNEE,
  ofi.id                AS ORIGINE_FINANCEMENT_ID,
  tmp.COMPLEMENT_FINANCEMENT,
  tmp.QUOTITE_FINANCEMENT,
  tmp.DATE_DEBUT_FINANCEMENT as DATE_DEBUT,
  tmp.DATE_FIN_FINANCEMENT as DATE_FIN
FROM TMP_FINANCEMENT tmp
       --        JOIN STRUCTURE s ON s.SOURCE_CODE = 'COMUE::'||tmp.ETABLISSEMENT_ID
       --        JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
       JOIN THESE t on t.SOURCE_CODE = tmp.THESE_ID
       JOIN ORIGINE_FINANCEMENT ofi on substr(ofi.SOURCE_CODE,6/*sans 'UCN::'*/) = substr(tmp.ORIGINE_FINANCEMENT_ID,8/*sans 'COMUE::'*/)
/

create or replace view SRC_TITRE_ACCES as
SELECT
  NULL                 AS id,
  tmp.SOURCE_CODE   AS SOURCE_CODE,
  src.ID            AS source_id,
  --e.id              AS etablissement_id,
  t.id              AS these_id,
  tmp.TITRE_ACCES_INTERNE_EXTERNE,
  tmp.LIBELLE_TITRE_ACCES,
  tmp.TYPE_ETB_TITRE_ACCES,
  tmp.LIBELLE_ETB_TITRE_ACCES,
  tmp.CODE_DEPT_TITRE_ACCES,
  tmp.CODE_PAYS_TITRE_ACCES
FROM TMP_TITRE_ACCES tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = 'COMUE::'||tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
       JOIN THESE t ON t.SOURCE_CODE = tmp.THESE_ID
/

create or replace view SRC_THESE_ANNEE_UNIV as
SELECT
  NULL                 AS id,
  tmp.SOURCE_CODE   AS SOURCE_CODE,
  src.ID            AS source_id,
  --e.id              AS etablissement_id,
  t.id              AS these_id,
  tmp.ANNEE_UNIV
FROM TMP_THESE_ANNEE_UNIV tmp
       JOIN STRUCTURE s ON s.SOURCE_CODE = 'COMUE::'||tmp.ETABLISSEMENT_ID
       JOIN ETABLISSEMENT e ON e.STRUCTURE_ID = s.ID
       JOIN SOURCE src ON src.CODE = tmp.SOURCE_ID
       JOIN THESE t ON t.SOURCE_CODE = tmp.THESE_ID
/











create view V_DIFF_VARIABLE as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE",diff."DATE_DEB_VALIDITE",diff."DATE_FIN_VALIDITE",diff."DESCRIPTION",diff."ETABLISSEMENT_ID",diff."VALEUR",diff."U_CODE",diff."U_DATE_DEB_VALIDITE",diff."U_DATE_FIN_VALIDITE",diff."U_DESCRIPTION",diff."U_ETABLISSEMENT_ID",diff."U_VALEUR" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_DEB_VALIDITE ELSE S.DATE_DEB_VALIDITE END DATE_DEB_VALIDITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_FIN_VALIDITE ELSE S.DATE_FIN_VALIDITE END DATE_FIN_VALIDITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DESCRIPTION ELSE S.DESCRIPTION END DESCRIPTION,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETABLISSEMENT_ID ELSE S.ETABLISSEMENT_ID END ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VALEUR ELSE S.VALEUR END VALEUR,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.DATE_DEB_VALIDITE <> S.DATE_DEB_VALIDITE OR (D.DATE_DEB_VALIDITE IS NULL AND S.DATE_DEB_VALIDITE IS NOT NULL) OR (D.DATE_DEB_VALIDITE IS NOT NULL AND S.DATE_DEB_VALIDITE IS NULL) THEN 1 ELSE 0 END U_DATE_DEB_VALIDITE,
    CASE WHEN D.DATE_FIN_VALIDITE <> S.DATE_FIN_VALIDITE OR (D.DATE_FIN_VALIDITE IS NULL AND S.DATE_FIN_VALIDITE IS NOT NULL) OR (D.DATE_FIN_VALIDITE IS NOT NULL AND S.DATE_FIN_VALIDITE IS NULL) THEN 1 ELSE 0 END U_DATE_FIN_VALIDITE,
    CASE WHEN D.DESCRIPTION <> S.DESCRIPTION OR (D.DESCRIPTION IS NULL AND S.DESCRIPTION IS NOT NULL) OR (D.DESCRIPTION IS NOT NULL AND S.DESCRIPTION IS NULL) THEN 1 ELSE 0 END U_DESCRIPTION,
    CASE WHEN D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ETABLISSEMENT_ID,
    CASE WHEN D.VALEUR <> S.VALEUR OR (D.VALEUR IS NULL AND S.VALEUR IS NOT NULL) OR (D.VALEUR IS NOT NULL AND S.VALEUR IS NULL) THEN 1 ELSE 0 END U_VALEUR
FROM
  VARIABLE D
  FULL JOIN SRC_VARIABLE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.DATE_DEB_VALIDITE <> S.DATE_DEB_VALIDITE OR (D.DATE_DEB_VALIDITE IS NULL AND S.DATE_DEB_VALIDITE IS NOT NULL) OR (D.DATE_DEB_VALIDITE IS NOT NULL AND S.DATE_DEB_VALIDITE IS NULL)
  OR D.DATE_FIN_VALIDITE <> S.DATE_FIN_VALIDITE OR (D.DATE_FIN_VALIDITE IS NULL AND S.DATE_FIN_VALIDITE IS NOT NULL) OR (D.DATE_FIN_VALIDITE IS NOT NULL AND S.DATE_FIN_VALIDITE IS NULL)
  OR D.DESCRIPTION <> S.DESCRIPTION OR (D.DESCRIPTION IS NULL AND S.DESCRIPTION IS NOT NULL) OR (D.DESCRIPTION IS NOT NULL AND S.DESCRIPTION IS NULL)
  OR D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL)
  OR D.VALEUR <> S.VALEUR OR (D.VALEUR IS NULL AND S.VALEUR IS NOT NULL) OR (D.VALEUR IS NOT NULL AND S.VALEUR IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_THESE as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_UNIV_1ERE_INSC",diff."CORREC_AUTORISEE",diff."DATE_AUTORIS_SOUTENANCE",diff."DATE_FIN_CONFID",diff."DATE_PREM_INSC",diff."DATE_PREV_SOUTENANCE",diff."DATE_SOUTENANCE",diff."DOCTORANT_ID",diff."ECOLE_DOCT_ID",diff."ETABLISSEMENT_ID",diff."ETAT_THESE",diff."LIB_DISC",diff."LIB_ETAB_COTUT",diff."LIB_PAYS_COTUT",diff."RESULTAT",diff."SOUTENANCE_AUTORIS",diff."TEM_AVENANT_COTUT",diff."TITRE",diff."UNITE_RECH_ID",diff."U_ANNEE_UNIV_1ERE_INSC",diff."U_CORREC_AUTORISEE",diff."U_DATE_AUTORIS_SOUTENANCE",diff."U_DATE_FIN_CONFID",diff."U_DATE_PREM_INSC",diff."U_DATE_PREV_SOUTENANCE",diff."U_DATE_SOUTENANCE",diff."U_DOCTORANT_ID",diff."U_ECOLE_DOCT_ID",diff."U_ETABLISSEMENT_ID",diff."U_ETAT_THESE",diff."U_LIB_DISC",diff."U_LIB_ETAB_COTUT",diff."U_LIB_PAYS_COTUT",diff."U_RESULTAT",diff."U_SOUTENANCE_AUTORIS",diff."U_TEM_AVENANT_COTUT",diff."U_TITRE",diff."U_UNITE_RECH_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_UNIV_1ERE_INSC ELSE S.ANNEE_UNIV_1ERE_INSC END ANNEE_UNIV_1ERE_INSC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CORREC_AUTORISEE ELSE S.CORREC_AUTORISEE END CORREC_AUTORISEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_AUTORIS_SOUTENANCE ELSE S.DATE_AUTORIS_SOUTENANCE END DATE_AUTORIS_SOUTENANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_FIN_CONFID ELSE S.DATE_FIN_CONFID END DATE_FIN_CONFID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_PREM_INSC ELSE S.DATE_PREM_INSC END DATE_PREM_INSC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_PREV_SOUTENANCE ELSE S.DATE_PREV_SOUTENANCE END DATE_PREV_SOUTENANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_SOUTENANCE ELSE S.DATE_SOUTENANCE END DATE_SOUTENANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DOCTORANT_ID ELSE S.DOCTORANT_ID END DOCTORANT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ECOLE_DOCT_ID ELSE S.ECOLE_DOCT_ID END ECOLE_DOCT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETABLISSEMENT_ID ELSE S.ETABLISSEMENT_ID END ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETAT_THESE ELSE S.ETAT_THESE END ETAT_THESE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIB_DISC ELSE S.LIB_DISC END LIB_DISC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIB_ETAB_COTUT ELSE S.LIB_ETAB_COTUT END LIB_ETAB_COTUT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIB_PAYS_COTUT ELSE S.LIB_PAYS_COTUT END LIB_PAYS_COTUT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.RESULTAT ELSE S.RESULTAT END RESULTAT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SOUTENANCE_AUTORIS ELSE S.SOUTENANCE_AUTORIS END SOUTENANCE_AUTORIS,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEM_AVENANT_COTUT ELSE S.TEM_AVENANT_COTUT END TEM_AVENANT_COTUT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TITRE ELSE S.TITRE END TITRE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.UNITE_RECH_ID ELSE S.UNITE_RECH_ID END UNITE_RECH_ID,
    CASE WHEN D.ANNEE_UNIV_1ERE_INSC <> S.ANNEE_UNIV_1ERE_INSC OR (D.ANNEE_UNIV_1ERE_INSC IS NULL AND S.ANNEE_UNIV_1ERE_INSC IS NOT NULL) OR (D.ANNEE_UNIV_1ERE_INSC IS NOT NULL AND S.ANNEE_UNIV_1ERE_INSC IS NULL) THEN 1 ELSE 0 END U_ANNEE_UNIV_1ERE_INSC,
    CASE WHEN D.CORREC_AUTORISEE <> S.CORREC_AUTORISEE OR (D.CORREC_AUTORISEE IS NULL AND S.CORREC_AUTORISEE IS NOT NULL) OR (D.CORREC_AUTORISEE IS NOT NULL AND S.CORREC_AUTORISEE IS NULL) THEN 1 ELSE 0 END U_CORREC_AUTORISEE,
    CASE WHEN D.DATE_AUTORIS_SOUTENANCE <> S.DATE_AUTORIS_SOUTENANCE OR (D.DATE_AUTORIS_SOUTENANCE IS NULL AND S.DATE_AUTORIS_SOUTENANCE IS NOT NULL) OR (D.DATE_AUTORIS_SOUTENANCE IS NOT NULL AND S.DATE_AUTORIS_SOUTENANCE IS NULL) THEN 1 ELSE 0 END U_DATE_AUTORIS_SOUTENANCE,
    CASE WHEN D.DATE_FIN_CONFID <> S.DATE_FIN_CONFID OR (D.DATE_FIN_CONFID IS NULL AND S.DATE_FIN_CONFID IS NOT NULL) OR (D.DATE_FIN_CONFID IS NOT NULL AND S.DATE_FIN_CONFID IS NULL) THEN 1 ELSE 0 END U_DATE_FIN_CONFID,
    CASE WHEN D.DATE_PREM_INSC <> S.DATE_PREM_INSC OR (D.DATE_PREM_INSC IS NULL AND S.DATE_PREM_INSC IS NOT NULL) OR (D.DATE_PREM_INSC IS NOT NULL AND S.DATE_PREM_INSC IS NULL) THEN 1 ELSE 0 END U_DATE_PREM_INSC,
    CASE WHEN D.DATE_PREV_SOUTENANCE <> S.DATE_PREV_SOUTENANCE OR (D.DATE_PREV_SOUTENANCE IS NULL AND S.DATE_PREV_SOUTENANCE IS NOT NULL) OR (D.DATE_PREV_SOUTENANCE IS NOT NULL AND S.DATE_PREV_SOUTENANCE IS NULL) THEN 1 ELSE 0 END U_DATE_PREV_SOUTENANCE,
    CASE WHEN D.DATE_SOUTENANCE <> S.DATE_SOUTENANCE OR (D.DATE_SOUTENANCE IS NULL AND S.DATE_SOUTENANCE IS NOT NULL) OR (D.DATE_SOUTENANCE IS NOT NULL AND S.DATE_SOUTENANCE IS NULL) THEN 1 ELSE 0 END U_DATE_SOUTENANCE,
    CASE WHEN D.DOCTORANT_ID <> S.DOCTORANT_ID OR (D.DOCTORANT_ID IS NULL AND S.DOCTORANT_ID IS NOT NULL) OR (D.DOCTORANT_ID IS NOT NULL AND S.DOCTORANT_ID IS NULL) THEN 1 ELSE 0 END U_DOCTORANT_ID,
    CASE WHEN D.ECOLE_DOCT_ID <> S.ECOLE_DOCT_ID OR (D.ECOLE_DOCT_ID IS NULL AND S.ECOLE_DOCT_ID IS NOT NULL) OR (D.ECOLE_DOCT_ID IS NOT NULL AND S.ECOLE_DOCT_ID IS NULL) THEN 1 ELSE 0 END U_ECOLE_DOCT_ID,
    CASE WHEN D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ETABLISSEMENT_ID,
    CASE WHEN D.ETAT_THESE <> S.ETAT_THESE OR (D.ETAT_THESE IS NULL AND S.ETAT_THESE IS NOT NULL) OR (D.ETAT_THESE IS NOT NULL AND S.ETAT_THESE IS NULL) THEN 1 ELSE 0 END U_ETAT_THESE,
    CASE WHEN D.LIB_DISC <> S.LIB_DISC OR (D.LIB_DISC IS NULL AND S.LIB_DISC IS NOT NULL) OR (D.LIB_DISC IS NOT NULL AND S.LIB_DISC IS NULL) THEN 1 ELSE 0 END U_LIB_DISC,
    CASE WHEN D.LIB_ETAB_COTUT <> S.LIB_ETAB_COTUT OR (D.LIB_ETAB_COTUT IS NULL AND S.LIB_ETAB_COTUT IS NOT NULL) OR (D.LIB_ETAB_COTUT IS NOT NULL AND S.LIB_ETAB_COTUT IS NULL) THEN 1 ELSE 0 END U_LIB_ETAB_COTUT,
    CASE WHEN D.LIB_PAYS_COTUT <> S.LIB_PAYS_COTUT OR (D.LIB_PAYS_COTUT IS NULL AND S.LIB_PAYS_COTUT IS NOT NULL) OR (D.LIB_PAYS_COTUT IS NOT NULL AND S.LIB_PAYS_COTUT IS NULL) THEN 1 ELSE 0 END U_LIB_PAYS_COTUT,
    CASE WHEN D.RESULTAT <> S.RESULTAT OR (D.RESULTAT IS NULL AND S.RESULTAT IS NOT NULL) OR (D.RESULTAT IS NOT NULL AND S.RESULTAT IS NULL) THEN 1 ELSE 0 END U_RESULTAT,
    CASE WHEN D.SOUTENANCE_AUTORIS <> S.SOUTENANCE_AUTORIS OR (D.SOUTENANCE_AUTORIS IS NULL AND S.SOUTENANCE_AUTORIS IS NOT NULL) OR (D.SOUTENANCE_AUTORIS IS NOT NULL AND S.SOUTENANCE_AUTORIS IS NULL) THEN 1 ELSE 0 END U_SOUTENANCE_AUTORIS,
    CASE WHEN D.TEM_AVENANT_COTUT <> S.TEM_AVENANT_COTUT OR (D.TEM_AVENANT_COTUT IS NULL AND S.TEM_AVENANT_COTUT IS NOT NULL) OR (D.TEM_AVENANT_COTUT IS NOT NULL AND S.TEM_AVENANT_COTUT IS NULL) THEN 1 ELSE 0 END U_TEM_AVENANT_COTUT,
    CASE WHEN D.TITRE <> S.TITRE OR (D.TITRE IS NULL AND S.TITRE IS NOT NULL) OR (D.TITRE IS NOT NULL AND S.TITRE IS NULL) THEN 1 ELSE 0 END U_TITRE,
    CASE WHEN D.UNITE_RECH_ID <> S.UNITE_RECH_ID OR (D.UNITE_RECH_ID IS NULL AND S.UNITE_RECH_ID IS NOT NULL) OR (D.UNITE_RECH_ID IS NOT NULL AND S.UNITE_RECH_ID IS NULL) THEN 1 ELSE 0 END U_UNITE_RECH_ID
FROM
  THESE D
  FULL JOIN SRC_THESE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_UNIV_1ERE_INSC <> S.ANNEE_UNIV_1ERE_INSC OR (D.ANNEE_UNIV_1ERE_INSC IS NULL AND S.ANNEE_UNIV_1ERE_INSC IS NOT NULL) OR (D.ANNEE_UNIV_1ERE_INSC IS NOT NULL AND S.ANNEE_UNIV_1ERE_INSC IS NULL)
  OR D.CORREC_AUTORISEE <> S.CORREC_AUTORISEE OR (D.CORREC_AUTORISEE IS NULL AND S.CORREC_AUTORISEE IS NOT NULL) OR (D.CORREC_AUTORISEE IS NOT NULL AND S.CORREC_AUTORISEE IS NULL)
  OR D.DATE_AUTORIS_SOUTENANCE <> S.DATE_AUTORIS_SOUTENANCE OR (D.DATE_AUTORIS_SOUTENANCE IS NULL AND S.DATE_AUTORIS_SOUTENANCE IS NOT NULL) OR (D.DATE_AUTORIS_SOUTENANCE IS NOT NULL AND S.DATE_AUTORIS_SOUTENANCE IS NULL)
  OR D.DATE_FIN_CONFID <> S.DATE_FIN_CONFID OR (D.DATE_FIN_CONFID IS NULL AND S.DATE_FIN_CONFID IS NOT NULL) OR (D.DATE_FIN_CONFID IS NOT NULL AND S.DATE_FIN_CONFID IS NULL)
  OR D.DATE_PREM_INSC <> S.DATE_PREM_INSC OR (D.DATE_PREM_INSC IS NULL AND S.DATE_PREM_INSC IS NOT NULL) OR (D.DATE_PREM_INSC IS NOT NULL AND S.DATE_PREM_INSC IS NULL)
  OR D.DATE_PREV_SOUTENANCE <> S.DATE_PREV_SOUTENANCE OR (D.DATE_PREV_SOUTENANCE IS NULL AND S.DATE_PREV_SOUTENANCE IS NOT NULL) OR (D.DATE_PREV_SOUTENANCE IS NOT NULL AND S.DATE_PREV_SOUTENANCE IS NULL)
  OR D.DATE_SOUTENANCE <> S.DATE_SOUTENANCE OR (D.DATE_SOUTENANCE IS NULL AND S.DATE_SOUTENANCE IS NOT NULL) OR (D.DATE_SOUTENANCE IS NOT NULL AND S.DATE_SOUTENANCE IS NULL)
  OR D.DOCTORANT_ID <> S.DOCTORANT_ID OR (D.DOCTORANT_ID IS NULL AND S.DOCTORANT_ID IS NOT NULL) OR (D.DOCTORANT_ID IS NOT NULL AND S.DOCTORANT_ID IS NULL)
  OR D.ECOLE_DOCT_ID <> S.ECOLE_DOCT_ID OR (D.ECOLE_DOCT_ID IS NULL AND S.ECOLE_DOCT_ID IS NOT NULL) OR (D.ECOLE_DOCT_ID IS NOT NULL AND S.ECOLE_DOCT_ID IS NULL)
  OR D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL)
  OR D.ETAT_THESE <> S.ETAT_THESE OR (D.ETAT_THESE IS NULL AND S.ETAT_THESE IS NOT NULL) OR (D.ETAT_THESE IS NOT NULL AND S.ETAT_THESE IS NULL)
  OR D.LIB_DISC <> S.LIB_DISC OR (D.LIB_DISC IS NULL AND S.LIB_DISC IS NOT NULL) OR (D.LIB_DISC IS NOT NULL AND S.LIB_DISC IS NULL)
  OR D.LIB_ETAB_COTUT <> S.LIB_ETAB_COTUT OR (D.LIB_ETAB_COTUT IS NULL AND S.LIB_ETAB_COTUT IS NOT NULL) OR (D.LIB_ETAB_COTUT IS NOT NULL AND S.LIB_ETAB_COTUT IS NULL)
  OR D.LIB_PAYS_COTUT <> S.LIB_PAYS_COTUT OR (D.LIB_PAYS_COTUT IS NULL AND S.LIB_PAYS_COTUT IS NOT NULL) OR (D.LIB_PAYS_COTUT IS NOT NULL AND S.LIB_PAYS_COTUT IS NULL)
  OR D.RESULTAT <> S.RESULTAT OR (D.RESULTAT IS NULL AND S.RESULTAT IS NOT NULL) OR (D.RESULTAT IS NOT NULL AND S.RESULTAT IS NULL)
  OR D.SOUTENANCE_AUTORIS <> S.SOUTENANCE_AUTORIS OR (D.SOUTENANCE_AUTORIS IS NULL AND S.SOUTENANCE_AUTORIS IS NOT NULL) OR (D.SOUTENANCE_AUTORIS IS NOT NULL AND S.SOUTENANCE_AUTORIS IS NULL)
  OR D.TEM_AVENANT_COTUT <> S.TEM_AVENANT_COTUT OR (D.TEM_AVENANT_COTUT IS NULL AND S.TEM_AVENANT_COTUT IS NOT NULL) OR (D.TEM_AVENANT_COTUT IS NOT NULL AND S.TEM_AVENANT_COTUT IS NULL)
  OR D.TITRE <> S.TITRE OR (D.TITRE IS NULL AND S.TITRE IS NOT NULL) OR (D.TITRE IS NOT NULL AND S.TITRE IS NULL)
  OR D.UNITE_RECH_ID <> S.UNITE_RECH_ID OR (D.UNITE_RECH_ID IS NULL AND S.UNITE_RECH_ID IS NOT NULL) OR (D.UNITE_RECH_ID IS NOT NULL AND S.UNITE_RECH_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_ROLE as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE",diff."LIBELLE",diff."ROLE_ID",diff."STRUCTURE_ID",diff."THESE_DEP",diff."TYPE_STRUCTURE_DEPENDANT_ID",diff."U_CODE",diff."U_LIBELLE",diff."U_ROLE_ID",diff."U_STRUCTURE_ID",diff."U_THESE_DEP",diff."U_TYPE_STRUCTURE_DEPENDANT_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ROLE_ID ELSE S.ROLE_ID END ROLE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_DEP ELSE S.THESE_DEP END THESE_DEP,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_STRUCTURE_DEPENDANT_ID ELSE S.TYPE_STRUCTURE_DEPENDANT_ID END TYPE_STRUCTURE_DEPENDANT_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL) THEN 1 ELSE 0 END U_ROLE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.THESE_DEP <> S.THESE_DEP OR (D.THESE_DEP IS NULL AND S.THESE_DEP IS NOT NULL) OR (D.THESE_DEP IS NOT NULL AND S.THESE_DEP IS NULL) THEN 1 ELSE 0 END U_THESE_DEP,
    CASE WHEN D.TYPE_STRUCTURE_DEPENDANT_ID <> S.TYPE_STRUCTURE_DEPENDANT_ID OR (D.TYPE_STRUCTURE_DEPENDANT_ID IS NULL AND S.TYPE_STRUCTURE_DEPENDANT_ID IS NOT NULL) OR (D.TYPE_STRUCTURE_DEPENDANT_ID IS NOT NULL AND S.TYPE_STRUCTURE_DEPENDANT_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_STRUCTURE_DEPENDANT_ID
FROM
  ROLE D
  FULL JOIN SRC_ROLE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.THESE_DEP <> S.THESE_DEP OR (D.THESE_DEP IS NULL AND S.THESE_DEP IS NOT NULL) OR (D.THESE_DEP IS NOT NULL AND S.THESE_DEP IS NULL)
  OR D.TYPE_STRUCTURE_DEPENDANT_ID <> S.TYPE_STRUCTURE_DEPENDANT_ID OR (D.TYPE_STRUCTURE_DEPENDANT_ID IS NULL AND S.TYPE_STRUCTURE_DEPENDANT_ID IS NOT NULL) OR (D.TYPE_STRUCTURE_DEPENDANT_ID IS NOT NULL AND S.TYPE_STRUCTURE_DEPENDANT_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_INDIVIDU as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CIVILITE",diff."DATE_NAISSANCE",diff."EMAIL",diff."NATIONALITE",diff."NOM_PATRONYMIQUE",diff."NOM_USUEL",diff."PRENOM1",diff."PRENOM2",diff."PRENOM3",diff."SUPANN_ID",diff."TYPE",diff."U_CIVILITE",diff."U_DATE_NAISSANCE",diff."U_EMAIL",diff."U_NATIONALITE",diff."U_NOM_PATRONYMIQUE",diff."U_NOM_USUEL",diff."U_PRENOM1",diff."U_PRENOM2",diff."U_PRENOM3",diff."U_SUPANN_ID",diff."U_TYPE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CIVILITE ELSE S.CIVILITE END CIVILITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_NAISSANCE ELSE S.DATE_NAISSANCE END DATE_NAISSANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.EMAIL ELSE S.EMAIL END EMAIL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NATIONALITE ELSE S.NATIONALITE END NATIONALITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_PATRONYMIQUE ELSE S.NOM_PATRONYMIQUE END NOM_PATRONYMIQUE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_USUEL ELSE S.NOM_USUEL END NOM_USUEL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM1 ELSE S.PRENOM1 END PRENOM1,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM2 ELSE S.PRENOM2 END PRENOM2,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM3 ELSE S.PRENOM3 END PRENOM3,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SUPANN_ID ELSE S.SUPANN_ID END SUPANN_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE ELSE S.TYPE END TYPE,
    CASE WHEN D.CIVILITE <> S.CIVILITE OR (D.CIVILITE IS NULL AND S.CIVILITE IS NOT NULL) OR (D.CIVILITE IS NOT NULL AND S.CIVILITE IS NULL) THEN 1 ELSE 0 END U_CIVILITE,
    CASE WHEN D.DATE_NAISSANCE <> S.DATE_NAISSANCE OR (D.DATE_NAISSANCE IS NULL AND S.DATE_NAISSANCE IS NOT NULL) OR (D.DATE_NAISSANCE IS NOT NULL AND S.DATE_NAISSANCE IS NULL) THEN 1 ELSE 0 END U_DATE_NAISSANCE,
    CASE WHEN D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL) THEN 1 ELSE 0 END U_EMAIL,
    CASE WHEN D.NATIONALITE <> S.NATIONALITE OR (D.NATIONALITE IS NULL AND S.NATIONALITE IS NOT NULL) OR (D.NATIONALITE IS NOT NULL AND S.NATIONALITE IS NULL) THEN 1 ELSE 0 END U_NATIONALITE,
    CASE WHEN D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL) THEN 1 ELSE 0 END U_NOM_PATRONYMIQUE,
    CASE WHEN D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL) THEN 1 ELSE 0 END U_NOM_USUEL,
    CASE WHEN D.PRENOM1 <> S.PRENOM1 OR (D.PRENOM1 IS NULL AND S.PRENOM1 IS NOT NULL) OR (D.PRENOM1 IS NOT NULL AND S.PRENOM1 IS NULL) THEN 1 ELSE 0 END U_PRENOM1,
    CASE WHEN D.PRENOM2 <> S.PRENOM2 OR (D.PRENOM2 IS NULL AND S.PRENOM2 IS NOT NULL) OR (D.PRENOM2 IS NOT NULL AND S.PRENOM2 IS NULL) THEN 1 ELSE 0 END U_PRENOM2,
    CASE WHEN D.PRENOM3 <> S.PRENOM3 OR (D.PRENOM3 IS NULL AND S.PRENOM3 IS NOT NULL) OR (D.PRENOM3 IS NOT NULL AND S.PRENOM3 IS NULL) THEN 1 ELSE 0 END U_PRENOM3,
    CASE WHEN D.SUPANN_ID <> S.SUPANN_ID OR (D.SUPANN_ID IS NULL AND S.SUPANN_ID IS NOT NULL) OR (D.SUPANN_ID IS NOT NULL AND S.SUPANN_ID IS NULL) THEN 1 ELSE 0 END U_SUPANN_ID,
    CASE WHEN D.TYPE <> S.TYPE OR (D.TYPE IS NULL AND S.TYPE IS NOT NULL) OR (D.TYPE IS NOT NULL AND S.TYPE IS NULL) THEN 1 ELSE 0 END U_TYPE
FROM
  INDIVIDU D
  FULL JOIN SRC_INDIVIDU S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CIVILITE <> S.CIVILITE OR (D.CIVILITE IS NULL AND S.CIVILITE IS NOT NULL) OR (D.CIVILITE IS NOT NULL AND S.CIVILITE IS NULL)
  OR D.DATE_NAISSANCE <> S.DATE_NAISSANCE OR (D.DATE_NAISSANCE IS NULL AND S.DATE_NAISSANCE IS NOT NULL) OR (D.DATE_NAISSANCE IS NOT NULL AND S.DATE_NAISSANCE IS NULL)
  OR D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL)
  OR D.NATIONALITE <> S.NATIONALITE OR (D.NATIONALITE IS NULL AND S.NATIONALITE IS NOT NULL) OR (D.NATIONALITE IS NOT NULL AND S.NATIONALITE IS NULL)
  OR D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL)
  OR D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL)
  OR D.PRENOM1 <> S.PRENOM1 OR (D.PRENOM1 IS NULL AND S.PRENOM1 IS NOT NULL) OR (D.PRENOM1 IS NOT NULL AND S.PRENOM1 IS NULL)
  OR D.PRENOM2 <> S.PRENOM2 OR (D.PRENOM2 IS NULL AND S.PRENOM2 IS NOT NULL) OR (D.PRENOM2 IS NOT NULL AND S.PRENOM2 IS NULL)
  OR D.PRENOM3 <> S.PRENOM3 OR (D.PRENOM3 IS NULL AND S.PRENOM3 IS NOT NULL) OR (D.PRENOM3 IS NOT NULL AND S.PRENOM3 IS NULL)
  OR D.SUPANN_ID <> S.SUPANN_ID OR (D.SUPANN_ID IS NULL AND S.SUPANN_ID IS NOT NULL) OR (D.SUPANN_ID IS NOT NULL AND S.SUPANN_ID IS NULL)
  OR D.TYPE <> S.TYPE OR (D.TYPE IS NULL AND S.TYPE IS NOT NULL) OR (D.TYPE IS NOT NULL AND S.TYPE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_DOCTORANT as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ETABLISSEMENT_ID",diff."INDIVIDU_ID",diff."U_ETABLISSEMENT_ID",diff."U_INDIVIDU_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETABLISSEMENT_ID ELSE S.ETABLISSEMENT_ID END ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INDIVIDU_ID ELSE S.INDIVIDU_ID END INDIVIDU_ID,
    CASE WHEN D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ETABLISSEMENT_ID,
    CASE WHEN D.INDIVIDU_ID <> S.INDIVIDU_ID OR (D.INDIVIDU_ID IS NULL AND S.INDIVIDU_ID IS NOT NULL) OR (D.INDIVIDU_ID IS NOT NULL AND S.INDIVIDU_ID IS NULL) THEN 1 ELSE 0 END U_INDIVIDU_ID
FROM
  DOCTORANT D
  FULL JOIN SRC_DOCTORANT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL)
  OR D.INDIVIDU_ID <> S.INDIVIDU_ID OR (D.INDIVIDU_ID IS NULL AND S.INDIVIDU_ID IS NOT NULL) OR (D.INDIVIDU_ID IS NOT NULL AND S.INDIVIDU_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_ACTEUR as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ACTEUR_ETABLISSEMENT_ID",diff."INDIVIDU_ID",diff."LIB_ROLE_COMPL",diff."QUALITE",diff."ROLE_ID",diff."THESE_ID",diff."U_ACTEUR_ETABLISSEMENT_ID",diff."U_INDIVIDU_ID",diff."U_LIB_ROLE_COMPL",diff."U_QUALITE",diff."U_ROLE_ID",diff."U_THESE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ACTEUR_ETABLISSEMENT_ID ELSE S.ACTEUR_ETABLISSEMENT_ID END ACTEUR_ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INDIVIDU_ID ELSE S.INDIVIDU_ID END INDIVIDU_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIB_ROLE_COMPL ELSE S.LIB_ROLE_COMPL END LIB_ROLE_COMPL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.QUALITE ELSE S.QUALITE END QUALITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ROLE_ID ELSE S.ROLE_ID END ROLE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_ID ELSE S.THESE_ID END THESE_ID,
    CASE WHEN D.ACTEUR_ETABLISSEMENT_ID <> S.ACTEUR_ETABLISSEMENT_ID OR (D.ACTEUR_ETABLISSEMENT_ID IS NULL AND S.ACTEUR_ETABLISSEMENT_ID IS NOT NULL) OR (D.ACTEUR_ETABLISSEMENT_ID IS NOT NULL AND S.ACTEUR_ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ACTEUR_ETABLISSEMENT_ID,
    CASE WHEN D.INDIVIDU_ID <> S.INDIVIDU_ID OR (D.INDIVIDU_ID IS NULL AND S.INDIVIDU_ID IS NOT NULL) OR (D.INDIVIDU_ID IS NOT NULL AND S.INDIVIDU_ID IS NULL) THEN 1 ELSE 0 END U_INDIVIDU_ID,
    CASE WHEN D.LIB_ROLE_COMPL <> S.LIB_ROLE_COMPL OR (D.LIB_ROLE_COMPL IS NULL AND S.LIB_ROLE_COMPL IS NOT NULL) OR (D.LIB_ROLE_COMPL IS NOT NULL AND S.LIB_ROLE_COMPL IS NULL) THEN 1 ELSE 0 END U_LIB_ROLE_COMPL,
    CASE WHEN D.QUALITE <> S.QUALITE OR (D.QUALITE IS NULL AND S.QUALITE IS NOT NULL) OR (D.QUALITE IS NOT NULL AND S.QUALITE IS NULL) THEN 1 ELSE 0 END U_QUALITE,
    CASE WHEN D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL) THEN 1 ELSE 0 END U_ROLE_ID,
    CASE WHEN D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL) THEN 1 ELSE 0 END U_THESE_ID
FROM
  ACTEUR D
  FULL JOIN SRC_ACTEUR S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ACTEUR_ETABLISSEMENT_ID <> S.ACTEUR_ETABLISSEMENT_ID OR (D.ACTEUR_ETABLISSEMENT_ID IS NULL AND S.ACTEUR_ETABLISSEMENT_ID IS NOT NULL) OR (D.ACTEUR_ETABLISSEMENT_ID IS NOT NULL AND S.ACTEUR_ETABLISSEMENT_ID IS NULL)
  OR D.INDIVIDU_ID <> S.INDIVIDU_ID OR (D.INDIVIDU_ID IS NULL AND S.INDIVIDU_ID IS NOT NULL) OR (D.INDIVIDU_ID IS NOT NULL AND S.INDIVIDU_ID IS NULL)
  OR D.LIB_ROLE_COMPL <> S.LIB_ROLE_COMPL OR (D.LIB_ROLE_COMPL IS NULL AND S.LIB_ROLE_COMPL IS NOT NULL) OR (D.LIB_ROLE_COMPL IS NOT NULL AND S.LIB_ROLE_COMPL IS NULL)
  OR D.QUALITE <> S.QUALITE OR (D.QUALITE IS NULL AND S.QUALITE IS NOT NULL) OR (D.QUALITE IS NOT NULL AND S.QUALITE IS NULL)
  OR D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL)
  OR D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_UNITE_RECH as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."STRUCTURE_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  UNITE_RECH D
  FULL JOIN SRC_UNITE_RECH S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_STRUCTURE as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE",diff."LIBELLE",diff."SIGLE",diff."TYPE_STRUCTURE_ID",diff."U_CODE",diff."U_LIBELLE",diff."U_SIGLE",diff."U_TYPE_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SIGLE ELSE S.SIGLE END SIGLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_STRUCTURE_ID ELSE S.TYPE_STRUCTURE_ID END TYPE_STRUCTURE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.SIGLE <> S.SIGLE OR (D.SIGLE IS NULL AND S.SIGLE IS NOT NULL) OR (D.SIGLE IS NOT NULL AND S.SIGLE IS NULL) THEN 1 ELSE 0 END U_SIGLE,
    CASE WHEN D.TYPE_STRUCTURE_ID <> S.TYPE_STRUCTURE_ID OR (D.TYPE_STRUCTURE_ID IS NULL AND S.TYPE_STRUCTURE_ID IS NOT NULL) OR (D.TYPE_STRUCTURE_ID IS NOT NULL AND S.TYPE_STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_STRUCTURE_ID
FROM
  STRUCTURE D
  FULL JOIN SRC_STRUCTURE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.SIGLE <> S.SIGLE OR (D.SIGLE IS NULL AND S.SIGLE IS NOT NULL) OR (D.SIGLE IS NOT NULL AND S.SIGLE IS NULL)
  OR D.TYPE_STRUCTURE_ID <> S.TYPE_STRUCTURE_ID OR (D.TYPE_STRUCTURE_ID IS NULL AND S.TYPE_STRUCTURE_ID IS NOT NULL) OR (D.TYPE_STRUCTURE_ID IS NOT NULL AND S.TYPE_STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_ETABLISSEMENT as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."STRUCTURE_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  ETABLISSEMENT D
  FULL JOIN SRC_ETABLISSEMENT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_ECOLE_DOCT as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."STRUCTURE_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  ECOLE_DOCT D
  FULL JOIN SRC_ECOLE_DOCT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_FINANCEMENT as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE",diff."COMPLEMENT_FINANCEMENT",diff."ORIGINE_FINANCEMENT_ID",diff."QUOTITE_FINANCEMENT",diff."THESE_ID",diff."U_ANNEE",diff."U_COMPLEMENT_FINANCEMENT",diff."U_ORIGINE_FINANCEMENT_ID",diff."U_QUOTITE_FINANCEMENT",diff."U_THESE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE ELSE S.ANNEE END ANNEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.COMPLEMENT_FINANCEMENT ELSE S.COMPLEMENT_FINANCEMENT END COMPLEMENT_FINANCEMENT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ORIGINE_FINANCEMENT_ID ELSE S.ORIGINE_FINANCEMENT_ID END ORIGINE_FINANCEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.QUOTITE_FINANCEMENT ELSE S.QUOTITE_FINANCEMENT END QUOTITE_FINANCEMENT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_ID ELSE S.THESE_ID END THESE_ID,
    CASE WHEN D.ANNEE <> S.ANNEE OR (D.ANNEE IS NULL AND S.ANNEE IS NOT NULL) OR (D.ANNEE IS NOT NULL AND S.ANNEE IS NULL) THEN 1 ELSE 0 END U_ANNEE,
    CASE WHEN D.COMPLEMENT_FINANCEMENT <> S.COMPLEMENT_FINANCEMENT OR (D.COMPLEMENT_FINANCEMENT IS NULL AND S.COMPLEMENT_FINANCEMENT IS NOT NULL) OR (D.COMPLEMENT_FINANCEMENT IS NOT NULL AND S.COMPLEMENT_FINANCEMENT IS NULL) THEN 1 ELSE 0 END U_COMPLEMENT_FINANCEMENT,
    CASE WHEN D.ORIGINE_FINANCEMENT_ID <> S.ORIGINE_FINANCEMENT_ID OR (D.ORIGINE_FINANCEMENT_ID IS NULL AND S.ORIGINE_FINANCEMENT_ID IS NOT NULL) OR (D.ORIGINE_FINANCEMENT_ID IS NOT NULL AND S.ORIGINE_FINANCEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ORIGINE_FINANCEMENT_ID,
    CASE WHEN D.QUOTITE_FINANCEMENT <> S.QUOTITE_FINANCEMENT OR (D.QUOTITE_FINANCEMENT IS NULL AND S.QUOTITE_FINANCEMENT IS NOT NULL) OR (D.QUOTITE_FINANCEMENT IS NOT NULL AND S.QUOTITE_FINANCEMENT IS NULL) THEN 1 ELSE 0 END U_QUOTITE_FINANCEMENT,
    CASE WHEN D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL) THEN 1 ELSE 0 END U_THESE_ID
FROM
  FINANCEMENT D
  FULL JOIN SRC_FINANCEMENT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE <> S.ANNEE OR (D.ANNEE IS NULL AND S.ANNEE IS NOT NULL) OR (D.ANNEE IS NOT NULL AND S.ANNEE IS NULL)
  OR D.COMPLEMENT_FINANCEMENT <> S.COMPLEMENT_FINANCEMENT OR (D.COMPLEMENT_FINANCEMENT IS NULL AND S.COMPLEMENT_FINANCEMENT IS NOT NULL) OR (D.COMPLEMENT_FINANCEMENT IS NOT NULL AND S.COMPLEMENT_FINANCEMENT IS NULL)
  OR D.ORIGINE_FINANCEMENT_ID <> S.ORIGINE_FINANCEMENT_ID OR (D.ORIGINE_FINANCEMENT_ID IS NULL AND S.ORIGINE_FINANCEMENT_ID IS NOT NULL) OR (D.ORIGINE_FINANCEMENT_ID IS NOT NULL AND S.ORIGINE_FINANCEMENT_ID IS NULL)
  OR D.QUOTITE_FINANCEMENT <> S.QUOTITE_FINANCEMENT OR (D.QUOTITE_FINANCEMENT IS NULL AND S.QUOTITE_FINANCEMENT IS NOT NULL) OR (D.QUOTITE_FINANCEMENT IS NOT NULL AND S.QUOTITE_FINANCEMENT IS NULL)
  OR D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_TITRE_ACCES as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE_DEPT_TITRE_ACCES",diff."CODE_PAYS_TITRE_ACCES",diff."LIBELLE_ETB_TITRE_ACCES",diff."LIBELLE_TITRE_ACCES",diff."THESE_ID",diff."TITRE_ACCES_INTERNE_EXTERNE",diff."TYPE_ETB_TITRE_ACCES",diff."U_CODE_DEPT_TITRE_ACCES",diff."U_CODE_PAYS_TITRE_ACCES",diff."U_LIBELLE_ETB_TITRE_ACCES",diff."U_LIBELLE_TITRE_ACCES",diff."U_THESE_ID",diff."U_TITRE_ACCES_INTERNE_EXTERNE",diff."U_TYPE_ETB_TITRE_ACCES" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE_DEPT_TITRE_ACCES ELSE S.CODE_DEPT_TITRE_ACCES END CODE_DEPT_TITRE_ACCES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE_PAYS_TITRE_ACCES ELSE S.CODE_PAYS_TITRE_ACCES END CODE_PAYS_TITRE_ACCES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_ETB_TITRE_ACCES ELSE S.LIBELLE_ETB_TITRE_ACCES END LIBELLE_ETB_TITRE_ACCES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_TITRE_ACCES ELSE S.LIBELLE_TITRE_ACCES END LIBELLE_TITRE_ACCES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_ID ELSE S.THESE_ID END THESE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TITRE_ACCES_INTERNE_EXTERNE ELSE S.TITRE_ACCES_INTERNE_EXTERNE END TITRE_ACCES_INTERNE_EXTERNE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_ETB_TITRE_ACCES ELSE S.TYPE_ETB_TITRE_ACCES END TYPE_ETB_TITRE_ACCES,
    CASE WHEN D.CODE_DEPT_TITRE_ACCES <> S.CODE_DEPT_TITRE_ACCES OR (D.CODE_DEPT_TITRE_ACCES IS NULL AND S.CODE_DEPT_TITRE_ACCES IS NOT NULL) OR (D.CODE_DEPT_TITRE_ACCES IS NOT NULL AND S.CODE_DEPT_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_CODE_DEPT_TITRE_ACCES,
    CASE WHEN D.CODE_PAYS_TITRE_ACCES <> S.CODE_PAYS_TITRE_ACCES OR (D.CODE_PAYS_TITRE_ACCES IS NULL AND S.CODE_PAYS_TITRE_ACCES IS NOT NULL) OR (D.CODE_PAYS_TITRE_ACCES IS NOT NULL AND S.CODE_PAYS_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_CODE_PAYS_TITRE_ACCES,
    CASE WHEN D.LIBELLE_ETB_TITRE_ACCES <> S.LIBELLE_ETB_TITRE_ACCES OR (D.LIBELLE_ETB_TITRE_ACCES IS NULL AND S.LIBELLE_ETB_TITRE_ACCES IS NOT NULL) OR (D.LIBELLE_ETB_TITRE_ACCES IS NOT NULL AND S.LIBELLE_ETB_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_LIBELLE_ETB_TITRE_ACCES,
    CASE WHEN D.LIBELLE_TITRE_ACCES <> S.LIBELLE_TITRE_ACCES OR (D.LIBELLE_TITRE_ACCES IS NULL AND S.LIBELLE_TITRE_ACCES IS NOT NULL) OR (D.LIBELLE_TITRE_ACCES IS NOT NULL AND S.LIBELLE_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_LIBELLE_TITRE_ACCES,
    CASE WHEN D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL) THEN 1 ELSE 0 END U_THESE_ID,
    CASE WHEN D.TITRE_ACCES_INTERNE_EXTERNE <> S.TITRE_ACCES_INTERNE_EXTERNE OR (D.TITRE_ACCES_INTERNE_EXTERNE IS NULL AND S.TITRE_ACCES_INTERNE_EXTERNE IS NOT NULL) OR (D.TITRE_ACCES_INTERNE_EXTERNE IS NOT NULL AND S.TITRE_ACCES_INTERNE_EXTERNE IS NULL) THEN 1 ELSE 0 END U_TITRE_ACCES_INTERNE_EXTERNE,
    CASE WHEN D.TYPE_ETB_TITRE_ACCES <> S.TYPE_ETB_TITRE_ACCES OR (D.TYPE_ETB_TITRE_ACCES IS NULL AND S.TYPE_ETB_TITRE_ACCES IS NOT NULL) OR (D.TYPE_ETB_TITRE_ACCES IS NOT NULL AND S.TYPE_ETB_TITRE_ACCES IS NULL) THEN 1 ELSE 0 END U_TYPE_ETB_TITRE_ACCES
FROM
  TITRE_ACCES D
  FULL JOIN SRC_TITRE_ACCES S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE_DEPT_TITRE_ACCES <> S.CODE_DEPT_TITRE_ACCES OR (D.CODE_DEPT_TITRE_ACCES IS NULL AND S.CODE_DEPT_TITRE_ACCES IS NOT NULL) OR (D.CODE_DEPT_TITRE_ACCES IS NOT NULL AND S.CODE_DEPT_TITRE_ACCES IS NULL)
  OR D.CODE_PAYS_TITRE_ACCES <> S.CODE_PAYS_TITRE_ACCES OR (D.CODE_PAYS_TITRE_ACCES IS NULL AND S.CODE_PAYS_TITRE_ACCES IS NOT NULL) OR (D.CODE_PAYS_TITRE_ACCES IS NOT NULL AND S.CODE_PAYS_TITRE_ACCES IS NULL)
  OR D.LIBELLE_ETB_TITRE_ACCES <> S.LIBELLE_ETB_TITRE_ACCES OR (D.LIBELLE_ETB_TITRE_ACCES IS NULL AND S.LIBELLE_ETB_TITRE_ACCES IS NOT NULL) OR (D.LIBELLE_ETB_TITRE_ACCES IS NOT NULL AND S.LIBELLE_ETB_TITRE_ACCES IS NULL)
  OR D.LIBELLE_TITRE_ACCES <> S.LIBELLE_TITRE_ACCES OR (D.LIBELLE_TITRE_ACCES IS NULL AND S.LIBELLE_TITRE_ACCES IS NOT NULL) OR (D.LIBELLE_TITRE_ACCES IS NOT NULL AND S.LIBELLE_TITRE_ACCES IS NULL)
  OR D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL)
  OR D.TITRE_ACCES_INTERNE_EXTERNE <> S.TITRE_ACCES_INTERNE_EXTERNE OR (D.TITRE_ACCES_INTERNE_EXTERNE IS NULL AND S.TITRE_ACCES_INTERNE_EXTERNE IS NOT NULL) OR (D.TITRE_ACCES_INTERNE_EXTERNE IS NOT NULL AND S.TITRE_ACCES_INTERNE_EXTERNE IS NULL)
  OR D.TYPE_ETB_TITRE_ACCES <> S.TYPE_ETB_TITRE_ACCES OR (D.TYPE_ETB_TITRE_ACCES IS NULL AND S.TYPE_ETB_TITRE_ACCES IS NOT NULL) OR (D.TYPE_ETB_TITRE_ACCES IS NOT NULL AND S.TYPE_ETB_TITRE_ACCES IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/

create view V_DIFF_THESE_ANNEE_UNIV as
select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_UNIV",diff."THESE_ID",diff."U_ANNEE_UNIV",diff."U_THESE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_UNIV ELSE S.ANNEE_UNIV END ANNEE_UNIV,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.THESE_ID ELSE S.THESE_ID END THESE_ID,
    CASE WHEN D.ANNEE_UNIV <> S.ANNEE_UNIV OR (D.ANNEE_UNIV IS NULL AND S.ANNEE_UNIV IS NOT NULL) OR (D.ANNEE_UNIV IS NOT NULL AND S.ANNEE_UNIV IS NULL) THEN 1 ELSE 0 END U_ANNEE_UNIV,
    CASE WHEN D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL) THEN 1 ELSE 0 END U_THESE_ID
FROM
  THESE_ANNEE_UNIV D
  FULL JOIN SRC_THESE_ANNEE_UNIV S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_UNIV <> S.ANNEE_UNIV OR (D.ANNEE_UNIV IS NULL AND S.ANNEE_UNIV IS NOT NULL) OR (D.ANNEE_UNIV IS NOT NULL AND S.ANNEE_UNIV IS NULL)
  OR D.THESE_ID <> S.THESE_ID OR (D.THESE_ID IS NULL AND S.THESE_ID IS NOT NULL) OR (D.THESE_ID IS NOT NULL AND S.THESE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1
/






